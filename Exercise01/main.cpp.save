#include <iostream>
#include <fstream>
#include <string>
#include "random.h"
#include "math.h"

using namespace std;

int main (int argc, char *argv[]){

	/************* OPENING FILES, SETTING UP GENERATOR ********/

	Random rnd;
	int seed[4];
	int p1,p2;
	//Read primes from file
	ifstream Primes("Primes");
	if(Primes.is_open()){
		Primes >> p1 >> p2;
	}
	else 
		cerr << "ERROR: Unable to open Primes << endl;
	Primes.close();
	
	//seed
	ifstream input("seed.in");
	string prop;
	if (input.is_open()){
		while(!input.eof()){
			input >> prop;
			if (prop == "RANDOMSEED"){
				input >> seed[0] >> seed[1] >> seed[2] >> seed[3];
				rnd.SetRandom(seed,p1,p2);
			}
		}
	}
	else
		cerr << "ERROR: Unable to open seed.in" << endl;
	


	/************************* EXERCISE 1 *************************/	
	
	int M = 100000; //number of steps
	int N = 100;	//number of blocks
	int L = M/N; 	//number of throws in each block
	double r[M];	//random array
	double m[N]; 	//single block mean values
	double m2[N];	//single block square m.vs.
	double cm[N];	//cumulative mean values
	double cm2[N];	//cumulative square m.vs.
	double err[N];  //progressive error
	
	
	//Initializing cumulative arrays
	for(int i=0; i<N; i++){
		 cm[i] = 0;
		 cm2[i] = 0;
	}
	
	//Generating numbers
	for (int i=0; i<M; i++) r[i] = rnd.Rannyu();
	
	//Calculating mean value and its square for each block
	double sum1 = 0;
	int k;
	for(int i=0; i<N; i++){
		for(int j=0; j<L; j++){
			k = j + L*i;
			sum1 += r[k];
		}
		m[i] = sum1/L;
		m2[i] = m[i]*m[i];
	}	
	
	//calculating cumulative mean, square mean, and uncertainty
	for(int i=0; i<N; i++){
		for(int j=0; j<i+1; j++){
		cm[i] += m[j];
		cm2[i] += m2[j];
		}
		cm[i]/=(i+1);
		cm2[i]/=(i+1);
		err[i] = sqrt((cm2[i] - cm[i]*cm[i])/i);
	}
	
	for(int i=0; i<N; i++) cout << cm[i] << " " << err[i] <<"\n";
	

	rnd.SaveSeed();

	return 0;
}
